Team Nine2One (Cindy Zheng, Julianna Yu, Ruoshui Mao)
SofDev
LJ01--Le Voyage de Learnination avec Mongo, Deuxi√®me Phase
Summary: Notes from Chapter 3 of MongoDB
2020-11-29

Inserting documents:
  -Can be done in JSON
  -Can be done in id field-value pairs
  -Populates _ID with ObjectId()
    -Created by default to ensure unique values
    -Ex: "_id": ObejctId("5ehgdkjf59fsd9sz0aw")
  -Specify data type for field-value pairs

MongoDB Documents:
    -Must have a UNIQUE _id value
      -Every doc can have the same field-value pairs, but as long as they do not have the same _id value, no error will be thrown.

Using Insert Command to Add Documents:
    -Connect to Atlas Cluster
    -Navigate to database
    -findOne() to find one doc from the database to get a general idea of shape and content
    -Error-testing:
      -Copy the document
      -Attempt to insert it into the database and look for a duplicate key error
    -Change the _id field's value and insert using the insert() command
    -Use find().pretty() to check

Inserting Documents: Multiple at a Time, Order
  -insert([]{first: pair}, {second: pair}])
  -If you try to insert 2+ pairs with the same _id, the second, and everything after the second, will fail. Insertion works on the basis of the order of the array.
  -{"ordered":false} will insert all unique _id, and all duplicates will produce their own error
  -When you attempt to insert into a collection/database that doesn't exist, it will create the new collection/database, and will not produce an error

Updating Documents:
  -Edit directly on Data Explorer
  -Choice between Array and under the line if there are sub-documents

Updating Documents: Mongo Shell
  -updateOne()
    -if multiple match the criteria, the first one found will be updated
  -updateMany()
    -All that match criteria will be updated
    -First argument specifies query, second specifies the update
      Ex. updateMany({"city":"Hudson"}, {"$inc":{"pop":10}})
        -$inc allows us to update multiple fields at a time by an increment
  -"$set" changes the field value to the value following the set command
    -will add fields that you specify if it does not already exist
    -can work on multiple fields at once by listening after "$set":
  -"$push" will add a value to an array

Deleting Documents and Collections:
  -deleteOne()
    -Only time this is a good choice is when deleteOn("_id":) because only _id is guaranteed to be unique
  -deleteMany()
  -command db.collectionname.drop()
    -returns boolean, removes collection from database
  -data is gone for good
